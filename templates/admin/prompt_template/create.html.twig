{% extends 'base_admin.html.twig' %}

{% block title %}Create Prompt Template{% endblock %}

{% block body %}
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">Create Prompt Template</h1>
            <div class="flex space-x-4">
                <a href="{{ path('admin_prompt_template_index') }}" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                    Back to List
                </a>
            </div>
        </div>

        {# Include flash messages component #}
        {% include 'admin/components/_flash_messages.html.twig' %}

        <div class="bg-white shadow-md rounded-lg overflow-hidden p-6">
            {{ form_start(form, {'attr': {'class': 'space-y-6'}}) }}

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h2 class="text-xl font-semibold mb-4">Basic Information</h2>

                        <div class="space-y-4">
                            <div>
                                {{ form_label(form.name, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.name) }}
                                {{ form_errors(form.name) }}
                            </div>

                            <div>
                                {{ form_label(form.description, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.description) }}
                                {{ form_errors(form.description) }}
                            </div>

                            <div>
                                {{ form_label(form.scope, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700 mb-2'}}) }}
                                <div class="flex flex-col space-y-2">
                                    {% for child in form.scope %}
                                        <label class="inline-flex items-center">
                                            {{ form_widget(child, {'attr': {'class': 'form-radio h-4 w-4 text-indigo-600 border-gray-300 focus:ring-indigo-500'}}) }}
                                            <span class="ml-2 text-sm text-gray-700">{{ form_label(child) }}</span>
                                        </label>
                                    {% endfor %}
                                </div>
                                {{ form_errors(form.scope) }}
                            </div>
                        </div>
                    </div>

                    <div>
                        <h2 class="text-xl font-semibold mb-4">Relationships</h2>

                        <div class="space-y-4">
                            <div>
                                {{ form_label(form.associatedModel, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.associatedModel) }}
                                {{ form_errors(form.associatedModel) }}
                            </div>

                            <div>
                                {{ form_label(form.owner, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.owner) }}
                                {{ form_errors(form.owner) }}
                            </div>

                            <div>
                                {{ form_label(form.organization, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700'}}) }}
                                {{ form_widget(form.organization) }}
                                {{ form_errors(form.organization) }}
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6">
                    <h2 class="text-xl font-semibold mb-4">Template Messages</h2>

                    <div id="messages-collection-container" data-controller="form-collection">
                        <template data-form-collection-target="prototype">
                            {{ form_widget(form.messages.vars.prototype)|raw }}
                        </template>

                        {{ form_label(form.messages, null, {'label_attr': {'class': 'block text-sm font-medium text-gray-700 mb-2'}}) }}

                        <div data-form-collection-target="collectionContainer" class="space-y-4">
                            {% for messageForm in form.messages %}
                                <div class="form-collection-row p-4 border border-gray-200 rounded-md bg-gray-50">
                                    {{ form_widget(messageForm) }}
                                    <button type="button" data-action="form-collection#remove" class="mt-2 text-red-600 hover:text-red-900">
                                        Remove this message
                                    </button>
                                </div>
                            {% endfor %}
                        </div>

                        <button type="button" data-action="form-collection#add" class="mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" /></svg>
                            Add Message
                        </button>

                        {{ form_errors(form.messages) }}

                        <div class="mt-2 text-sm text-gray-500">
                            <p class="mb-2">Define the sequence of system, user, and assistant messages. Use {{ '{{user_input}}' }} for the user's current message. Drag to reorder.</p>

                            <div class="mt-4">
                                <h4 class="font-medium mb-2">Available Variables:</h4>
                                <ul class="list-disc pl-5 space-y-1">
                                    <li><code>{{ '{{user_input}}' }}</code> - Current user message</li>
                                    <li><code>{{ '{{user.name}}' }}</code> - User's full name</li>
                                    <li><code>{{ '{{user.firstName}}' }}</code> - User's first name</li>
                                    <li><code>{{ '{{user.lastName}}' }}</code> - User's last name</li>
                                    <li><code>{{ '{{organization.name}}' }}</code> - Organization name</li>
                                    <li><code>{{ '{{organization.domain}}' }}</code> - Organization domain</li>
                                    <li><code>{{ '{{current_date}}' }}</code> - Current date (YYYY-MM-DD)</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 mt-8">
                    <a href="{{ path('admin_prompt_template_index') }}" class="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Cancel
                    </a>

                    <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Create Template
                    </button>
                </div>
            {{ form_end(form) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        // Add any additional JavaScript needed for the form
        document.addEventListener('DOMContentLoaded', function() {
            // Manual implementation of the form collection functionality
            const collectionContainer = document.querySelector('#messages-collection-container');
            if (!collectionContainer) {
                console.error('Collection container not found');
                return;
            }

            const prototypeTemplate = collectionContainer.querySelector('template');
            const collectionHolder = collectionContainer.querySelector('[data-form-collection-target="collectionContainer"]');
            const addButton = collectionContainer.querySelector('[data-action="form-collection#add"]');

            if (!prototypeTemplate || !collectionHolder || !addButton) {
                console.error('Required elements not found', { prototypeTemplate, collectionHolder, addButton });
                return;
            }

            // Initialize Sortable
            new Sortable(collectionHolder, {
                animation: 150,
                handle: '.form-collection-row',
                ghostClass: 'sortable-ghost',
                onEnd: function() {
                    // Update sort order after drag
                    updateSortOrder();
                }
            });

            // Add new item
            addButton.addEventListener('click', function() {
                const prototype = prototypeTemplate.innerHTML;
                const index = collectionHolder.querySelectorAll('.form-collection-row').length;
                const newForm = prototype.replace(/__name__/g, index);

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = newForm;
                const newItem = tempDiv.firstElementChild;
                newItem.classList.add('form-collection-row', 'p-4', 'border', 'border-gray-200', 'rounded-md', 'bg-gray-50');

                // Add remove button
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'mt-2 text-red-600 hover:text-red-900';
                removeButton.textContent = 'Remove this message';
                removeButton.addEventListener('click', function() {
                    newItem.remove();
                    updateSortOrder();
                });

                newItem.appendChild(removeButton);
                collectionHolder.appendChild(newItem);
                updateSortOrder();
            });

            // Add remove functionality to existing items
            document.querySelectorAll('[data-action="form-collection#remove"]').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('.form-collection-row');
                    if (row) {
                        row.remove();
                        updateSortOrder();
                    }
                });
            });

            // Update sort order inputs
            function updateSortOrder() {
                const rows = collectionHolder.querySelectorAll('.form-collection-row');
                rows.forEach((row, index) => {
                    const sortOrderInput = row.querySelector('.prompt-template-message-sort-order');
                    if (sortOrderInput) {
                        sortOrderInput.value = index;
                    }
                });
            }

            // Initial sort order update
            updateSortOrder();
            
            // Add a system message by default if there are no messages
            if (collectionHolder.querySelectorAll('.form-collection-row').length === 0) {
                addButton.click();
                
                // Set the role to system for the first message
                setTimeout(() => {
                    const firstRow = collectionHolder.querySelector('.form-collection-row');
                    if (firstRow) {
                        const roleSelect = firstRow.querySelector('select[name*="[role]"]');
                        if (roleSelect) {
                            roleSelect.value = 'system';
                        }
                    }
                }, 100);
            }
        });
    </script>
{% endblock %}
