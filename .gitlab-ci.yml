.php-cache: &php-cache
    key:
        prefix: php
        files:
            - backend/composer.lock
    paths:
        - backend/vendor/
    policy: pull

.php-prod-cache: &php-prod-cache
    key:
        prefix: php-prod
        files:
            - backend/composer.lock
    paths:
        - backend/vendor/
    policy: pull

.node-cache: &node-cache
    key:
        prefix: frontend
        files:
            - frontend/package-lock.json
    paths:
        - frontend/node_modules/
    policy: pull

default:
    image: $CI_REGISTRY/sk/docker-php:8.3
    interruptible: true
    tags:
        - arm
        - small

stages:
    - install
    - test
    - build
    - deploy

variables:
    GIT_DEPTH: 0
    FF_USE_FASTZIP: 1
    CACHE_COMPRESSION_LEVEL: 'fastest'

workflow:
    rules:
        -   if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        -   if: $CI_COMMIT_BRANCH == 'master'
        -   if: $CI_COMMIT_TAG =~ /^prod-/

###
.install.node:
    stage: install
    script:
        - cd frontend
        - npm ci --cache .npm --prefer-offline --no-audit --fund=false
    tags:
        - x86
        - large

install.node.frontend:
    extends: .install.node
    rules:
        - changes:
              paths:
                  - frontend/package-lock.json
              compare_to: master
        - if: $CI_COMMIT_MESSAGE =~ /\[install\]/
    image: node:20
    cache:
        <<: *node-cache
        policy: push

.install.php:
    stage: install
    rules:
        -   changes:
                - backend/composer.lock
        -   if: $CI_COMMIT_MESSAGE =~ /\[install\]/
    script:
        - cd backend
        - php composer.phar config -g cache-dir "$CI_PROJECT_DIR/.composer-cache"
        - php composer.phar install --prefer-dist --no-progress --no-interaction --no-scripts
    tags:
        - arm
        - large
    artifacts:
        paths:
            - backend/vendor

install.php.ci:
    extends: .install.php
    cache:
        <<: *php-cache
        policy: push
    script:
        - cd backend
        - php composer.phar install --no-interaction --ansi

.test.php:
    stage: test
    cache:
        <<: *php-cache
    needs:
        -   job: install.php.ci
            optional: true
    before_script:
        - cd backend

#test.php.phpstan:
#    extends: .test.php
#    script:
#        - php -d memory_limit=512M vendor/bin/phpstan analyse src --level=1
#    tags:
#        - arm
#        - large
.build:
    stage: build
    script:
        - cd frontend
        - npm run build
    tags:
        - x86
        - small

build.frontend:
    extends: .build
    image: node:20
    cache:
        <<: *node-cache
    needs:
        - job: install.node.frontend
          optional: true
    artifacts:
        paths:
            - frontend/dist
        expire_in: 1 week

.deploy:
    stage: deploy
    image: $CI_REGISTRY/sk/docker-php-deployer:v7.3.3
    interruptible: false
    resource_group: deploy
    cache:
        <<: *php-prod-cache
    dependencies:
        - build.frontend
    before_script:
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - cp "$DEPLOYMENT_KEY" ~/.ssh/id_ed25519
        - chmod 400 ~/.ssh/id_ed25519
        # Make sure frontend/dist exists in the backend directory
        - mkdir -p backend/frontend
        - cp -r frontend/dist backend/frontend/
        # Also copy to the expected location for the deployment script
        - mkdir -p backend/public
        - cp -r frontend/dist/* backend/public/

deploy.stage:
    extends: .deploy
    rules:
        - if: $CI_COMMIT_BRANCH == 'master'
    environment:
        name: stage
        url: https://chat-stage.www6.superkoderi.cz
    script:
        - cd backend
        - dep --version
        - dep -f .deploy.php deploy -vvv


# deploy.production:
#     extends: .deploy
#     rules:
#         -   if: $CI_COMMIT_TAG =~ /^prod-/
#     environment:
#         name: production
#         url: https://chat-prod.www6.superkoderi.cz
#     script:
#         #- 'printf "parameters:\n\tconfig:\n\t\twebVersion: \"%s\"" $CI_COMMIT_SHORT_SHA > app/config/webVersion.neon'
#         - dep -f .deploy.php deploy