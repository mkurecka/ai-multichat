security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: googleId

    role_hierarchy:
        ROLE_ORGANIZATION_ADMIN: ROLE_USER
        ROLE_ADMIN: [ROLE_ORGANIZATION_ADMIN, ROLE_ALLOWED_TO_SWITCH] # Grant switch permission to ROLE_ADMIN

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: false
            custom_authenticators:
                - App\Security\JWTAuthenticator
                - App\Security\TokenStorageApiAuthenticator
            # Add session authentication
            provider: app_user_provider
            # Allow session authentication to work alongside JWT
            context: main
            # Add entry point to redirect to login page if authentication fails
            entry_point: App\Security\AuthenticationEntryPoint
            # Add access denied handler to handle 403 errors
            access_denied_handler: App\Security\AccessDeniedHandler
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\GoogleAuthenticator
            logout:
                path: app_logout
                target: connect_google
            access_denied_url: /
            access_denied_handler: App\Security\AccessDeniedHandler
            # Add entry point to redirect to homepage if authentication fails
            entry_point: App\Security\AuthenticationEntryPoint
            switch_user: true # Enable user impersonation

    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/connect/google, roles: PUBLIC_ACCESS }
        - { path: ^/connect/google/check, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/google/callback, roles: PUBLIC_ACCESS } # Add rule for the new API callback
        - { path: ^/api/public, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS } # Allow token refresh without authentication
        - { path: ^/index, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_USER } # Protect all other API routes
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/$, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
